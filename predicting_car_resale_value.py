# -*- coding: utf-8 -*-
"""Predicting_Car_Resale_Value.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4imVIlFgugIVKbW7HC01jlnPlcFT2qF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

data = pd.read_csv("/content/sample_data/mission_3")

data.head(10)

data.isnull().sum()

data.info()

le = {}
encoding_cols = ['Brand', 'Fuel Type', 'Transmission']
for col in encoding_cols:
  le[col] = LabelEncoder()
  data[col] = le[col].fit_transform(data[col])
print(le)

data.head()

scale_cols = ['Model Year',	'Mileage (miles)', 'Condition']
scaler = MinMaxScaler()
data[scale_cols] = scaler.fit_transform(data[scale_cols])

data.head(15)

# # prompt: make oversampling for data  with path /content/sample_data/Worksheet in C  Users abdel Downloads AMHM-ITAI-03.csv to be 1 thousand row

# import pandas as pd
# from sklearn.utils import resample

# # Load the data (replace with the actual path)
# try:
#   data = pd.read_csv("/content/sample_data/Worksheet in C  Users abdel Downloads AMHM-ITAI-03.csv")
# except FileNotFoundError:
#   print("Error: File not found. Please provide the correct file path.")
#   # You might want to exit the script or handle the error differently
#   exit()


# # Separate majority and minority classes
# # Assuming 'Class' is the column you want to oversample. Replace if necessary.
# if 'Resale Price' not in data.columns:
#     print("Error: 'Class' column not found in the DataFrame. Please specify the correct column name for oversampling.")
#     exit()

# # Identify minority class
# minority_class = data['Resale Price'].value_counts().idxmin()
# minority_data = data[data['Resale Price'] == minority_class]

# # Oversample minority class to 1000 rows
# oversampled_minority = resample(minority_data, replace=True, n_samples=1000, random_state=123)


# # Concatenate the oversampled minority class with the original data
# data_oversampled = pd.concat([data, oversampled_minority])
# data_oversampled.to_csv("/content/sample_data/mission 3.csv", index=False)
# # Check the new class distribution
# print(data_oversampled['Resale Price'].value_counts())

# # Now data_oversampled contains the oversampled data

data.describe()

plt.figure(figsize=(10, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt

plt.figure(figsize=(10, 6))
sns.histplot(data['Resale Price'], kde=True, color="Green")
plt.title('Dsitribution of Resale Price')
plt.xlabel('Resale Price')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=data['Mileage (miles)'],y=data['Resale Price'], color="Blue")
plt.title('Realtion between Mileage (miles) and Resale Price')
plt.ylabel('Resale Price')
plt.xlabel('Mileage')
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x=data['Brand'],y=data['Resale Price'], color="red")
plt.title('Brand Impact on Resale Price ')
plt.xlabel('Brand')
plt.ylabel('Resale Price')
plt.show()

x = data.drop('Resale Price', axis=1)
y = data['Resale Price']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

x

y

lr = LinearRegression()
lr.fit(x_train, y_train)
y_pred_lr = lr.predict(x_test)

dt = DecisionTreeRegressor()
dt.fit(x_train, y_train)
y_pred_dt = dt.predict(x_test)

rf = RandomForestRegressor()
rf.fit(x_train, y_train)
y_pred_rf = rf.predict(x_test)

print("MAE for Lr:", mean_absolute_error(y_test, y_pred_lr))
print("MAE for dt:", mean_absolute_error(y_test, y_pred_dt))
print("MAE for RF:", mean_absolute_error(y_test, y_pred_rf))

print("MsE for Lr:", mean_squared_error(y_test, y_pred_lr))
print("MsE for dt:", mean_squared_error(y_test, y_pred_dt))
print("MsE for RF:", mean_squared_error(y_test, y_pred_rf))

print("R2 Score for Lr:", r2_score(y_test, y_pred_lr))
print("R2 Score for dt:", r2_score(y_test, y_pred_dt))
print("R2 Score for RF:", r2_score(y_test, y_pred_rf))

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_lr, color="blue", label = "Linear Regression")
plt.scatter(y_test, y_pred_dt, color="green", label = "decision Tree Regressor")
plt.scatter(y_test, y_pred_rf, color="red", label = "Random Forest")
plt.xlabel("Actual Resale Price")
plt.ylabel("Predicted Resale Price")
plt.title("Actual vs Predicted Resale Price")
plt.legend()
plt.show()

grid_param = {
    'max_depth': [10,20,30,5,15,25,35], 'max_leaf_nodes': [5,7,10,15,20,24]
    }
grid_model = GridSearchCV(DecisionTreeRegressor(), grid_param, cv=5)
grid_model.fit(x_train, y_train)
print(grid_model.best_params_)

y_predict_grid = grid_model.best_estimator_.predict(x_test)
print("MAE for Grid:", mean_absolute_error(y_test, y_predict_grid))
print("MSE for Grid:", mean_squared_error(y_test, y_predict_grid))
print("r2 score for Grid:", r2_score(y_test, y_predict_grid))

random_param = {
    'max_depth': [10,20,30,5,15,25,35], 'n_estimators': [100,200,300,350,250,50]
}
random_model = RandomizedSearchCV(RandomForestRegressor(), random_param, cv=5)
random_model.fit(x_train, y_train)
print(random_model.best_params_)

y_predict_rf = random_model.best_estimator_.predict(x_test)
print("MAE for Random:", mean_absolute_error(y_test, y_predict_rf))
print("MSE for Random:", mean_squared_error(y_test, y_predict_rf))
print("r2 score for Random:", r2_score(y_test, y_predict_rf))

pip install gradio

data.columns

import gradio as gr
def predict_resale_price(brand, model_year, miles, condition, fuel_type, transmission):
  try:
    input_data = pd.DataFrame({
        'Brand': [brand],
        'Model Year': [model_year],
        'Mileage (miles)': [miles],
        'Fuel Type': [fuel_type],
        'Condition': [condition],
        'Transmission': [transmission]
    })
    for col in encoding_cols:
      input_data[col] = le[col].transform(input_data[col])
    input_data[scale_cols] = scaler.transform(input_data[scale_cols])
    predict = random_model.best_estimator_.predict(input_data)
    return f"Predicted Resale Price: ${predict[0]:,.2f}"
  except Exception as e:
    return f"Error: {e}"
gr.Interface(
    fn=predict_resale_price,
    inputs=[
        gr.Dropdown(['Ford', 'BMW', 'Honda', 'Chevrolet', 'Toyota'], label="Brand"),
        gr.Number(label="Model Year"),
        gr.Number(label="Mileage (miles)"),
        gr.Number(label="Condition (1-5)"),
        gr.Dropdown(['Gasoline', 'Diesel', 'Electric'], label="Fuel Type"),
        gr.Dropdown(['Manual', 'Automatic'], label="Transmission")
    ],
    outputs = gr.Textbox(label="Predicted Resale Price"),
    title="Resale Price Prediction"
).launch()